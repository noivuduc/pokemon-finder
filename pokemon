#!/usr/bin/env node

const chalk = require('chalk')
const rl = require('readline')
const args = process.argv
const config = require('./config')
// Init in memory stores
const InMemoryData = require('./data')
const data = new InMemoryData(config)
// Init file caching
const Cache = require('./cache')
const fileCache = new Cache(config)
const Server = require('./server/server')
const server = new Server(data, fileCache)

const welcome = function() {
    const welcome = 
    `
    ===================================================================
    |                                                                   |
    |                      WELCOME TO POKEMON FINDER                    |
    |            Follow the menu below to perform your actions          |
    |                                                                   |
    |                                                                   |
     ===================================================================
    `
    console.log(chalk.green(welcome))
}

// usage represents the help guide
const menu = function () {
    const usageText = `
    [ MENU ]:
    1. Find a pokemon
    2. Clear cache
    3. Exit
  `
    console.log(chalk.green(usageText))
    prompt(chalk.green("Select an action:")).then((ans) => {
        executeCommand(ans)
    })
}

// used to log errors to the console in red color
function errorLog(error) {
    const eLog = chalk.red(error)
    console.log(eLog)
}

function displayMessage(result) {
    const resultLog = chalk.blue(result)
    console.log(resultLog)
}


if (args.length > 2) {
    errorLog('This application does not take any arguments')
    menu()
    return
}

/**
 * Init the application
 */
function init() {
    displayMessage('Loading data....')
    // Load data from cache to store in memory
    fileCache.sync(data)
    displayMessage('Data loaded into memory')
    welcome()
    menu()
}

/**
 * Perform finding pokemon function
 */
function findPokemon() {
    prompt(chalk.blue("Enter pokemon's name or ID to find: ")).then(async (query) => {
        const pokemon = await server.findPokemon(query)
        if (!pokemon) {
            errorLog(`Pokemon has name or Id is ${query} not found`)
        } else {
            const message =
        `[ Found ]:
        - ID       : ${pokemon.getId()}
        - Name     : ${pokemon.getName()}
        - Types    : ${pokemon.getTypes()}
        - Stats    : ${pokemon.getStats()}
        - Encounter: ${pokemon.getEncounters()}
        `
            displayMessage(message)
        }
        menu()
    })
}
/**
 * Show questions to the terminal and wait for input from user
 * @param question Question to ask
 */
function prompt(question) {
    const r = rl.createInterface({
        input: process.stdin,
        output: process.stdout,
        terminal: false
    });
    return new Promise((resolve, error) => {
        r.question(question, answer => {
            r.close()
            if (!isNaN(answer)) { // Check the input is number
                answer = Number.parseInt(answer)
            }
            resolve(answer)
        });
    })
}

function executeCommand(value) {
    switch(value) {
        case 1:
            findPokemon()
            break;
        case 2:
            fileCache.clear()
            data.clear()
            displayMessage('Cached is cleared')
            menu()
            break;
        case 3:
            displayMessage('System is shutting down....')
            return;    
        default:
            displayMessage('No actions matched')
            menu()        
    }
}

init()
